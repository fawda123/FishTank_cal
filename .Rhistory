minv <- parsin$minv
maxv <- parsin$maxv
# calibrate
res <- fishopt(vals, minv, maxv, factr = 1e9)
# append to output, save as you
cals[[idpar]] <- res
save(cals, file = 'rdata/cals.RData', compress = 'xz')
}
source('~/FishTank_cal/R/funcs.R')
source('R/funcs.R')
library(FME)
library(SWMPr)
library(tidyr)
library(dplyr)
library(WtRegDO)
library(lubridate)
library(oce)
library(ncdf4)
##
# calibrating to parameter subsets
rm(list = ls())
source('R/funcs.R')
load(file = 'rdata/tocal_all.RData')
idpars <- get_cmbs(tocal_all, 'O2', coll = FALSE)
cals <- vector('list', length = length(idpars))
names(cals) <- names(idpars)
for(idpar in names(idpars)){
# output
cat(idpar, '\n')
# get heurist and parameter subsets
parsin <- idpars[[idpar]]
vals <- parsin$vals
minv <- parsin$minv
maxv <- parsin$maxv
# calibrate
res <- fishopt(vals, minv, maxv, factr = 1e9)
# append to output, save as you
cals[[idpar]] <- res
save(cals, file = 'rdata/cals.RData', compress = 'xz')
}
debugSource('~/FishTank_cal/R/funcs.R')
source('R/funcs.R')
library(FME)
library(SWMPr)
library(tidyr)
library(dplyr)
library(WtRegDO)
library(lubridate)
library(oce)
library(ncdf4)
##
# calibrating to parameter subsets
rm(list = ls())
source('R/funcs.R')
load(file = 'rdata/tocal_all.RData')
idpars <- get_cmbs(tocal_all, 'O2', coll = FALSE)
cals <- vector('list', length = length(idpars))
names(cals) <- names(idpars)
for(idpar in names(idpars)){
# output
cat(idpar, '\n')
# get heurist and parameter subsets
parsin <- idpars[[idpar]]
vals <- parsin$vals
minv <- parsin$minv
maxv <- parsin$maxv
# calibrate
res <- fishopt(vals, minv, maxv, factr = 1e9)
# append to output, save as you
cals[[idpar]] <- res
save(cals, file = 'rdata/cals.RData', compress = 'xz')
}
source('R/funcs.R')
library(FME)
library(SWMPr)
library(tidyr)
library(dplyr)
library(WtRegDO)
library(lubridate)
library(oce)
library(ncdf4)
##
# calibrating to parameter subsets
rm(list = ls())
source('R/funcs.R')
load(file = 'rdata/tocal_all.RData')
idpars <- get_cmbs(tocal_all, 'O2', coll = FALSE)
cals <- vector('list', length = length(idpars))
names(cals) <- names(idpars)
for(idpar in names(idpars)){
# output
cat(idpar, '\n')
# get heurist and parameter subsets
parsin <- idpars[[idpar]]
vals <- parsin$vals
minv <- parsin$minv
maxv <- parsin$maxv
# calibrate
res <- fishopt(vals, minv, maxv, factr = 1e9)
# append to output, save as you
cals[[idpar]] <- res
save(cals, file = 'rdata/cals.RData', compress = 'xz')
}
source('R/funcs.R')
library(FME)
library(SWMPr)
library(tidyr)
library(dplyr)
library(WtRegDO)
library(lubridate)
library(oce)
library(ncdf4)
##
# calibrating to parameter subsets
rm(list = ls())
source('R/funcs.R')
load(file = 'rdata/tocal_all.RData')
idpars <- get_cmbs(tocal_all, 'O2', coll = FALSE)
cals <- vector('list', length = length(idpars))
names(cals) <- names(idpars)
for(idpar in names(idpars)){
# output
cat(idpar, '\n')
# get heurist and parameter subsets
parsin <- idpars[[idpar]]
vals <- parsin$vals
minv <- parsin$minv
maxv <- parsin$maxv
# calibrate
res <- fishopt(vals, minv, maxv, factr = 1e9)
# append to output, save as you
cals[[idpar]] <- res
save(cals, file = 'rdata/cals.RData', compress = 'xz')
}
source('R/funcs.R')
library(FME)
library(SWMPr)
library(tidyr)
library(dplyr)
library(WtRegDO)
library(lubridate)
library(oce)
library(ncdf4)
##
# calibrating to parameter subsets
rm(list = ls())
source('R/funcs.R')
load(file = 'rdata/tocal_all.RData')
idpars <- get_cmbs(tocal_all, 'O2', coll = FALSE)
cals <- vector('list', length = length(idpars))
names(cals) <- names(idpars)
for(idpar in names(idpars)){
# output
cat(idpar, '\n')
# get heurist and parameter subsets
parsin <- idpars[[idpar]]
vals <- parsin$vals
minv <- parsin$minv
maxv <- parsin$maxv
# calibrate
res <- fishopt(vals, minv, maxv, factr = 1e9)
# append to output, save as you
cals[[idpar]] <- res
save(cals, file = 'rdata/cals.RData', compress = 'xz')
}
exp_inp(flaskhobo, getvar = 'par', gettmt = i)
source('~/FishTank_cal/R/funcs.R')
flaskhobo
load(file = 'rdata/flaskhobo.RData')
exp_inp(flaskhobo)
?switch
switch(getvar,
Temp = 'temp',
Solar = 'par'
)
getvar
getvar <- switch(getvar,
Temp = 'temp',
Solar = 'par'
)
getvar
getvar <- 'temp'
switch(getvar,
temp = 'Temp',
par = 'Solar'
)
getvar <- switch(getvar,
temp = 'Temp',
par = 'Solar'
)
getvar
nchar(getvar)
paste0('data/FishTank/INPUT/', getvar, '.dat')
source('~/FishTank_cal/R/funcs.R')
source('R/funcs.R')
library(FME)
library(SWMPr)
library(tidyr)
library(dplyr)
library(WtRegDO)
library(lubridate)
library(oce)
library(ncdf4)
##
# calibrating to parameter subsets
rm(list = ls())
source('R/funcs.R')
load(file = 'rdata/tocal_all.RData')
idpars <- get_cmbs(tocal_all, 'O2', coll = FALSE)
cals <- vector('list', length = length(idpars))
names(cals) <- names(idpars)
for(idpar in names(idpars)){
# output
cat(idpar, '\n')
# get heurist and parameter subsets
parsin <- idpars[[idpar]]
vals <- parsin$vals
minv <- parsin$minv
maxv <- parsin$maxv
# calibrate
res <- fishopt(vals, minv, maxv, factr = 1e9)
# append to output, save as you
cals[[idpar]] <- res
save(cals, file = 'rdata/cals.RData', compress = 'xz')
}
source('~/FishTank_cal/R/funcs.R')
source('~/FishTank_cal/R/funcs.R')
source('R/funcs.R')
library(FME)
library(SWMPr)
library(tidyr)
library(dplyr)
library(WtRegDO)
library(lubridate)
library(oce)
library(ncdf4)
##
# calibrating to parameter subsets
rm(list = ls())
source('R/funcs.R')
load(file = 'rdata/tocal_all.RData')
idpars <- get_cmbs(tocal_all, 'O2', coll = FALSE)
cals <- vector('list', length = length(idpars))
names(cals) <- names(idpars)
for(idpar in names(idpars)){
# output
cat(idpar, '\n')
# get heurist and parameter subsets
parsin <- idpars[[idpar]]
vals <- parsin$vals
minv <- parsin$minv
maxv <- parsin$maxv
# calibrate
res <- fishopt(vals, minv, maxv, factr = 1e9)
# append to output, save as you
cals[[idpar]] <- res
save(cals, file = 'rdata/cals.RData', compress = 'xz')
}
source('~/FishTank_cal/R/funcs.R')
source('R/funcs.R')
library(FME)
library(SWMPr)
library(tidyr)
library(dplyr)
library(WtRegDO)
library(lubridate)
library(oce)
library(ncdf4)
##
# calibrating to parameter subsets
rm(list = ls())
source('R/funcs.R')
load(file = 'rdata/tocal_all.RData')
idpars <- get_cmbs(tocal_all, 'O2', coll = FALSE)
cals <- vector('list', length = length(idpars))
names(cals) <- names(idpars)
for(idpar in names(idpars)){
# output
cat(idpar, '\n')
# get heurist and parameter subsets
parsin <- idpars[[idpar]]
vals <- parsin$vals
minv <- parsin$minv
maxv <- parsin$maxv
# calibrate
res <- fishopt(vals, minv, maxv, factr = 1e9)
# append to output, save as you
cals[[idpar]] <- res
save(cals, file = 'rdata/cals.RData', compress = 'xz')
}
source('~/FishTank_cal/R/funcs.R')
source('R/funcs.R')
library(FME)
library(SWMPr)
library(tidyr)
library(dplyr)
library(WtRegDO)
library(lubridate)
library(oce)
library(ncdf4)
##
# calibrating to parameter subsets
rm(list = ls())
source('R/funcs.R')
load(file = 'rdata/tocal_all.RData')
idpars <- get_cmbs(tocal_all, 'O2', coll = FALSE)
cals <- vector('list', length = length(idpars))
names(cals) <- names(idpars)
for(idpar in names(idpars)){
# output
cat(idpar, '\n')
# get heurist and parameter subsets
parsin <- idpars[[idpar]]
vals <- parsin$vals
minv <- parsin$minv
maxv <- parsin$maxv
# calibrate
res <- fishopt(vals, minv, maxv, factr = 1e9)
# append to output, save as you
cals[[idpar]] <- res
save(cals, file = 'rdata/cals.RData', compress = 'xz')
}
install.package('tibble')
install.packages('tibble')
install.packages("tibble")
# create rdata files in data
source('R/funcs.R')
library(FME)
library(SWMPr)
library(tidyr)
library(dplyr)
library(WtRegDO)
library(lubridate)
library(oce)
library(ncdf4)
library(tibble)
##
# calibrating to parameter subsets
rm(list = ls())
source('R/funcs.R')
load(file = 'rdata/tocal_all.RData')
idpars <- get_cmbs(tocal_all, 'O2', coll = FALSE)
cals <- vector('list', length = length(idpars))
names(cals) <- names(idpars)
for(idpar in names(idpars)){
# output
cat(idpar, '\n')
# get heurist and parameter subsets
parsin <- idpars[[idpar]]
vals <- parsin$vals
minv <- parsin$minv
maxv <- parsin$maxv
# calibrate
res <- fishopt(vals, minv, maxv, factr = 1e9)
# append to output, save as you
cals[[idpar]] <- res
save(cals, file = 'rdata/cals.RData', compress = 'xz')
}
# create rdata files in data
source('R/funcs.R')
library(FME)
library(SWMPr)
library(tidyr)
library(dplyr)
library(WtRegDO)
library(lubridate)
library(oce)
library(ncdf4)
library(tibble)
##
# calibrating to parameter subsets
rm(list = ls())
source('R/funcs.R')
load(file = 'rdata/tocal_all.RData')
idpars <- get_cmbs(tocal_all, 'O2', coll = FALSE)
cals <- vector('list', length = length(idpars))
names(cals) <- names(idpars)
for(idpar in names(idpars)){
# output
cat(idpar, '\n')
# get heurist and parameter subsets
parsin <- idpars[[idpar]]
vals <- parsin$vals
minv <- parsin$minv
maxv <- parsin$maxv
# calibrate
res <- fishopt(vals, minv, maxv, factr = 1e9)
# append to output, save as you
cals[[idpar]] <- res
save(cals, file = 'rdata/cals.RData', compress = 'xz')
}
modO2
i
i
i
i
modO2
tocmp %>%
filter(time %in% endtm) %>%
.$O2
inps
obs
i
# create rdata files in data
source('R/funcs.R')
library(FME)
library(SWMPr)
library(tidyr)
library(dplyr)
library(WtRegDO)
library(lubridate)
library(oce)
library(ncdf4)
library(tibble)
##
# calibrating to parameter subsets
rm(list = ls())
source('R/funcs.R')
load(file = 'rdata/tocal_all.RData')
idpars <- get_cmbs(tocal_all, 'O2', coll = FALSE)
cals <- vector('list', length = length(idpars))
names(cals) <- names(idpars)
for(idpar in names(idpars)){
# output
cat(idpar, '\n')
# get heurist and parameter subsets
parsin <- idpars[[idpar]]
vals <- parsin$vals
minv <- parsin$minv
maxv <- parsin$maxv
# calibrate
res <- fishopt(vals, minv, maxv, factr = 1e9)
# append to output, save as you
cals[[idpar]] <- res
save(cals, file = 'rdata/cals.RData', compress = 'xz')
}
 restmp
restmp
obs
modO2
with(obs, sqrt(mean((endO2 - modO2)^2)))
obs$endO2 - obs$modO2
(obs$endO2 - obs$modO2) ^ 2
mean((obs$endO2 - obs$modO2) ^ 2)
sqrt(mean((obs$endO2 - obs$modO2) ^ 2))
pars
source('~/FishTank_cal/R/funcs.R')
source('R/funcs.R')
library(FME)
library(tidyr)
library(dplyr)
library(lubridate)
library(ncdf4)
library(tibble)
run_mod()
system('./FishTank.exe')
run_mod()
system('./FishTank.exe')
source('R/funcs.R')
library(FME)
library(tidyr)
library(dplyr)
library(lubridate)
library(ncdf4)
library(tibble)
run_mod()
system('./FishTank.exe')
source('R/funcs.R')
library(FME)
library(tidyr)
library(dplyr)
library(lubridate)
library(ncdf4)
library(tibble)
run_mod()
source('R/funcs.R')
library(FME)
library(tidyr)
library(dplyr)
library(lubridate)
library(ncdf4)
library(tibble)
run_mod()
source('R/funcs.R')
library(FME)
library(tidyr)
library(dplyr)
library(lubridate)
library(ncdf4)
library(tibble)
run_mod()
source('R/funcs.R')
library(FME)
library(tidyr)
library(dplyr)
library(lubridate)
library(ncdf4)
library(tibble)
run_mod()
load(file = 'input/GEM_InputFile.RData')
Vie(GEM_InputFile)
View(GEM_InputFile)
pars <- list(
'ReadVars_1' = 0,
'ReadVars_3' = 0
)
run_mod(pars = pars)
source('~/FishTank_cal/R/funcs.R')
source('~/FishTank_cal/R/funcs.R')
GEM_InputFile <- formpars('ignore/GEM_InputFile')
save(GEM_InputFile, file = 'input/GEM_InputFile.RData')
run_mod()
